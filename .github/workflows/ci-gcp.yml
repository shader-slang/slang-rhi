name: CI-GCP

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

jobs:
  build:
    # We don't require GCP runs to be successful, they are not the primary means of testing
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: ["windows", "linux", "macos"]
        platform: ["x86_64", "aarch64"]
        compiler: ["msvc", "gcc", "clang"]
        config: ["Debug", "Release"]
        exclude:
          # Exclude x86_64 for macos
          - { os: macos, platform: x86_64}
          # Exclude unavailable compilers
          - { os: windows, compiler: gcc }
          - { os: windows, platform: aarch64, compiler: clang }
          - { os: linux, compiler: msvc }
          - { os: macos, compiler: msvc }
          - { os: macos, compiler: gcc }
          # Exclude builds that are not yet supported on GCP
          - { os: windows, platform: "x86_64", compiler: clang }
          - { os: windows, platform: "x86_64", compiler: msvc, config: "Release" }
          - { os: windows, platform: "aarch64", compiler: msvc }
          - { os: linux, platform: "x86_64", compiler: clang }
          - { os: linux, platform: "x86_64", compiler: gcc }
          - { os: linux, platform: "aarch64", compiler: clang }
          - { os: linux, platform: "aarch64", compiler: gcc }
          - { os: macos, platform: "aarch64", compiler: clang }
        include:
          - { os: windows, platform: "x86_64", compiler: msvc, preset: default, config: "Debug", flags: "unit-test", runs-on: { group: gcp, labels: [Windows, X64] } }

    runs-on: ${{ matrix.runs-on }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup Linux
        if: matrix.os == 'linux' && contains(matrix.runs-on, 'ubuntu-')
        run: sudo apt-get update && sudo apt-get install -y xorg-dev

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{matrix.platform == 'aarch64' && 'amd64_arm64' || 'amd64'}}

      - name: Setup CMake/Ninja
        uses: lukka/get-cmake@latest

      - name: Configure
        run: cmake --preset ${{matrix.preset}} -S . -B build ${{ contains(matrix.flags, 'coverage') && '-DSLANG_RHI_ENABLE_COVERAGE=ON' || '' }}

      - name: Build
        run: cmake --build build --config ${{matrix.config}}

      - name: Unit Tests
        if: contains(matrix.flags, 'unit-test') && matrix.runs-on.group != 'gcp'
        run: |
          ctest --test-dir build --build-config ${{matrix.config}} --verbose

      - name: Unit Tests (Windows GCP)
        if: contains(matrix.flags, 'unit-test') && matrix.os == 'windows' && matrix.runs-on.group == 'gcp'
        run: |
          $testExe = Get-ChildItem -Path . -Recurse -Filter "slang-rhi-tests.exe" | Select-Object -First 1
          if ($testExe) {
              & $testExe.FullName -tce=ray-tracing*
          } else {
              Write-Error "Could not find slang-rhi-tests.exe"
              exit 1
          }
        shell: powershell
